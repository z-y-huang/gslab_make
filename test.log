running pytest
running egg_info
writing requirements to GSLab_Make.egg-info/requires.txt
writing GSLab_Make.egg-info/PKG-INFO
writing top-level names to GSLab_Make.egg-info/top_level.txt
writing dependency_links to GSLab_Make.egg-info/dependency_links.txt
reading manifest file 'GSLab_Make.egg-info/SOURCES.txt'
writing manifest file 'GSLab_Make.egg-info/SOURCES.txt'
running build_ext
============================= test session starts ==============================
platform darwin -- Python 2.7.15, pytest-3.5.1, py-1.5.3, pluggy-0.6.0
rootdir: /Users/zong/gslab_make, inifile:
collected 72 items

gslab_make/tests/test_clear_dir.py ...                                   [  4%]
gslab_make/tests/test_execute_command.py .                               [  5%]
gslab_make/tests/test_remove_path.py .F..                                [ 11%]
gslab_make/tests/test_run_lyx.py ........F.                              [ 25%]
gslab_make/tests/test_run_mathematica.py .FFF.FF                         [ 34%]
gslab_make/tests/test_run_matlab.py FFFF.FF                              [ 44%]
gslab_make/tests/test_run_perl.py ......                                 [ 52%]
gslab_make/tests/test_run_python.py ......                               [ 61%]
gslab_make/tests/test_run_r.py ......F.                                  [ 72%]
gslab_make/tests/test_run_stata.py ......                                [ 80%]
gslab_make/tests/test_tablefill.py ....                                  [ 86%]
gslab_make/tests/test_textfill.py .......F                               [ 97%]
gslab_make/tests/test_zip.py ..                                          [100%]

=================================== FAILURES ===================================
______________________ testRemovePath.test_default_noisy _______________________

self = <gslab_make.tests.test_remove_path.testRemovePath testMethod=test_default_noisy>

    def test_default_noisy(self):
        self.assertTrue(os.path.isfile('./output_local/text.txt'))
        with open('stdout.txt', 'w') as f:
                with redirect_stdout(f):
                        remove_path('./output_local/')
        time.sleep(0.1)
>       self.assertIn('Deleted:', open('stdout.txt').read())
E       AssertionError: 'Deleted:' not found in 'Removed: "/Users/zong/gslab_make/output_local"\n'

gslab_make/tests/test_remove_path.py:38: AssertionError
_______________________ testRunLyx.test_path_with_space ________________________

self = <gslab_make.tests.test_run_lyx.testRunLyx testMethod=test_path_with_space>

    def test_path_with_space(self):
        makelog = {'makelog' : 'log/make.log', 'pdf_dir' : 'output'}
        with nostderrout():
            start_makelog(makelog)
            run_lyx(makelog, program = 'gslab_make/tests/input/lyx_test_file copy.lyx', executable = metadata.default_executables[os.name]['lyx'])
        logfile_data = open(makelog['makelog'], 'rU').read()
        self.assertIn('LaTeX', logfile_data)
>       self.assertTrue(os.path.isfile('output/lyx_test_file.pdf'))
E       AssertionError: False is not true

gslab_make/tests/test_run_lyx.py:57: AssertionError
_____________________ testRunMathematica.test_default_log ______________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_default_log>

    def test_default_log(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_mathematica(makelog, program = 'gslab_make/tests/input/mathematica_test_script.m')

gslab_make/tests/test_run_mathematica.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/mathematica_test_script.m', kwargs = {}
makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f5b710>
command = 'math < "/Users/zong/gslab_make/gslab_make/tests/input/mathematica_test_script.m" -noprompt'
exit_code = 127
error_message = "********************************************************************************
Error with `run_mathematica`
*******...s: *\n%s' % error_message)
CritError: * Mathematica program executed with errors: *
/bin/sh: math: command not found

"

    def run_mathematica(paths, program, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'math', program = program, makelog = makelog, **kwargs)
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.program, direct.option)
            exit_code, error_message = direct.execute_command(command)
            direct.write_log()
            if exit_code != 0:
>               raise CritError('* Mathematica program executed with errors: *\n%s' % error_message)
E               CritError: * Mathematica program executed with errors: *
E               /bin/sh: math: command not found

gslab_make/run_program.py:273: CritError
______________________ testRunMathematica.test_executable ______________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_executable>

    def test_executable(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_mathematica(makelog, program = 'gslab_make/tests/input/mathematica_test_script.m', executable = metadata.default_executables[os.name]['math'])

gslab_make/tests/test_run_mathematica.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/mathematica_test_script.m'
kwargs = {'executable': 'math'}, makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f10850>
command = 'math < "/Users/zong/gslab_make/gslab_make/tests/input/mathematica_test_script.m" -noprompt'
exit_code = 127
error_message = "********************************************************************************
Error with `run_mathematica`
*******...s: *\n%s' % error_message)
CritError: * Mathematica program executed with errors: *
/bin/sh: math: command not found

"

    def run_mathematica(paths, program, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'math', program = program, makelog = makelog, **kwargs)
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.program, direct.option)
            exit_code, error_message = direct.execute_command(command)
            direct.write_log()
            if exit_code != 0:
>               raise CritError('* Mathematica program executed with errors: *\n%s' % error_message)
E               CritError: * Mathematica program executed with errors: *
E               /bin/sh: math: command not found

gslab_make/run_program.py:273: CritError
___________________ testRunMathematica.test_independent_log ____________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_independent_log>

    def test_independent_log(self):
        makelog = {'makelog' : 'log/make.log'}
        independent_log = {'makelog' : 'log/mathematica.log'}
        with nostderrout():
>           run_mathematica(makelog, program = 'gslab_make/tests/input/mathematica_test_script.m')

gslab_make/tests/test_run_mathematica.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/mathematica_test_script.m', kwargs = {}
makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f44c90>
command = 'math < "/Users/zong/gslab_make/gslab_make/tests/input/mathematica_test_script.m" -noprompt'
exit_code = 127
error_message = "********************************************************************************
Error with `run_mathematica`
*******...s: *\n%s' % error_message)
CritError: * Mathematica program executed with errors: *
/bin/sh: math: command not found

"

    def run_mathematica(paths, program, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'math', program = program, makelog = makelog, **kwargs)
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.program, direct.option)
            exit_code, error_message = direct.execute_command(command)
            direct.write_log()
            if exit_code != 0:
>               raise CritError('* Mathematica program executed with errors: *\n%s' % error_message)
E               CritError: * Mathematica program executed with errors: *
E               /bin/sh: math: command not found

gslab_make/run_program.py:273: CritError
________________________ testRunMathematica.test_option ________________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_option>

    def test_option(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_mathematica(makelog, program = 'gslab_make/tests/input/mathematica_test_script.m', option = '-initfile gslab_make/tests/input/mathematica_init_script.m')

gslab_make/tests/test_run_mathematica.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/mathematica_test_script.m'
kwargs = {'option': '-initfile gslab_make/tests/input/mathematica_init_script.m'}
makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f5bf90>
command = 'math < "/Users/zong/gslab_make/gslab_make/tests/input/mathematica_test_script.m" -initfile gslab_make/tests/input/mathematica_init_script.m'
exit_code = 127
error_message = "********************************************************************************
Error with `run_mathematica`
*******...s: *\n%s' % error_message)
CritError: * Mathematica program executed with errors: *
/bin/sh: math: command not found

"

    def run_mathematica(paths, program, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'math', program = program, makelog = makelog, **kwargs)
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.program, direct.option)
            exit_code, error_message = direct.execute_command(command)
            direct.write_log()
            if exit_code != 0:
>               raise CritError('* Mathematica program executed with errors: *\n%s' % error_message)
E               CritError: * Mathematica program executed with errors: *
E               /bin/sh: math: command not found

gslab_make/run_program.py:273: CritError
___________________ testRunMathematica.test_path_with_space ____________________

self = <gslab_make.tests.test_run_mathematica.testRunMathematica testMethod=test_path_with_space>

    def test_path_with_space(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_mathematica(makelog, program = 'gslab_make/tests/input/mathematica_test_script copy.m', executable = metadata.default_executables[os.name]['math'])

gslab_make/tests/test_run_mathematica.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/mathematica_test_script copy.m'
kwargs = {'executable': 'math'}, makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f44a50>
command = 'math < "/Users/zong/gslab_make/gslab_make/tests/input/mathematica_test_script copy.m" -noprompt'
exit_code = 127
error_message = "********************************************************************************
Error with `run_mathematica`
*******...s: *\n%s' % error_message)
CritError: * Mathematica program executed with errors: *
/bin/sh: math: command not found

"

    def run_mathematica(paths, program, **kwargs):
        """ Run Mathematica script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'math', program = program, makelog = makelog, **kwargs)
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.program, direct.option)
            exit_code, error_message = direct.execute_command(command)
            direct.write_log()
            if exit_code != 0:
>               raise CritError('* Mathematica program executed with errors: *\n%s' % error_message)
E               CritError: * Mathematica program executed with errors: *
E               /bin/sh: math: command not found

gslab_make/run_program.py:273: CritError
______________________ testRunMatlab.test_bad_executable _______________________

self = <gslab_make.tests.test_run_matlab.testRunMatlab testMethod=test_bad_executable>

    def test_bad_executable(self):
        makelog = {'makelog' : 'log/make.log'}
>       with self.assertRaises(CritError):
E       NameError: global name 'CritError' is not defined

gslab_make/tests/test_run_matlab.py:46: NameError
________________________ testRunMatlab.test_default_log ________________________

self = <gslab_make.tests.test_run_matlab.testRunMatlab testMethod=test_default_log>

    def test_default_log(self):
        makelog = {'makelog' : 'log/make.log'}
>       run_matlab(makelog, program = 'gslab_make/tests/input/matlab_test_script.m')

gslab_make/tests/test_run_matlab.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/matlab_test_script.m', kwargs = {}
makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f39710>
program_log = '/Users/zong/gslab_make/matlab_test_script.log'
command = 'matlab -nosplash -nodesktop -r "try run(\'/Users/zong/gslab_make/gslab_make/tests/input/matlab_test_script.m\'); catch e, fprintf(getReport(e)), exit(1); end; exit(0)" -logfile "matlab_test_script.log"'
exit_code = 1
error_message = "********************************************************************************
Error with `run_matlab`
************...('* Matlab program executed with errors: *\n%s' % error_message)
CritError: * Matlab program executed with errors: *

"

    def run_matlab(paths, program, **kwargs):
        """ Run Matlab script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'matlab', program = program, makelog = makelog, **kwargs)
    
            # Get program output
            program_log = os.path.join(os.getcwd(), direct.program_name + '.log')
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.option, direct.program, direct.program_name + '.log')
            exit_code, error_message = direct.execute_command(command)
            if exit_code != 0:
>               raise CritError('* Matlab program executed with errors: *\n%s' % error_message)
E               CritError: * Matlab program executed with errors: *

gslab_make/run_program.py:122: CritError
----------------------------- Captured stdout call -----------------------------
Executing: "matlab -nosplash -nodesktop -r "try run('/Users/zong/gslab_make/gslab_make/tests/input/matlab_test_script.m'); catch e, fprintf(getReport(e)), exit(1); end; exit(0)" -logfile "matlab_test_script.log""
________________________ testRunMatlab.test_executable _________________________

self = <gslab_make.tests.test_run_matlab.testRunMatlab testMethod=test_executable>

    def test_executable(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_matlab(makelog, program = 'gslab_make/tests/input/matlab_test_script.m', executable = metadata.default_executables[os.name]['matlab'])

gslab_make/tests/test_run_matlab.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/matlab_test_script.m'
kwargs = {'executable': 'matlab'}, makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f2bf10>
program_log = '/Users/zong/gslab_make/matlab_test_script.log'
command = 'matlab -nosplash -nodesktop -r "try run(\'/Users/zong/gslab_make/gslab_make/tests/input/matlab_test_script.m\'); catch e, fprintf(getReport(e)), exit(1); end; exit(0)" -logfile "matlab_test_script.log"'
exit_code = 1
error_message = "********************************************************************************
Error with `run_matlab`
************...('* Matlab program executed with errors: *\n%s' % error_message)
CritError: * Matlab program executed with errors: *

"

    def run_matlab(paths, program, **kwargs):
        """ Run Matlab script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'matlab', program = program, makelog = makelog, **kwargs)
    
            # Get program output
            program_log = os.path.join(os.getcwd(), direct.program_name + '.log')
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.option, direct.program, direct.program_name + '.log')
            exit_code, error_message = direct.execute_command(command)
            if exit_code != 0:
>               raise CritError('* Matlab program executed with errors: *\n%s' % error_message)
E               CritError: * Matlab program executed with errors: *

gslab_make/run_program.py:122: CritError
______________________ testRunMatlab.test_independent_log ______________________

self = <gslab_make.tests.test_run_matlab.testRunMatlab testMethod=test_independent_log>

    def test_independent_log(self):
        makelog = {'makelog' : 'log/make.log'}
        independent_log = {'makelog' : 'log/matlab.log'}
        with nostderrout():
>           run_matlab(makelog, program = 'gslab_make/tests/input/matlab_test_script.m', log=independent_log['makelog'])

gslab_make/tests/test_run_matlab.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/matlab_test_script.m'
kwargs = {'log': 'log/matlab.log'}, makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f31910>
program_log = '/Users/zong/gslab_make/matlab_test_script.log'
command = 'matlab -nosplash -nodesktop -r "try run(\'/Users/zong/gslab_make/gslab_make/tests/input/matlab_test_script.m\'); catch e, fprintf(getReport(e)), exit(1); end; exit(0)" -logfile "matlab_test_script.log"'
exit_code = 1
error_message = "********************************************************************************
Error with `run_matlab`
************...('* Matlab program executed with errors: *\n%s' % error_message)
CritError: * Matlab program executed with errors: *

"

    def run_matlab(paths, program, **kwargs):
        """ Run Matlab script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'matlab', program = program, makelog = makelog, **kwargs)
    
            # Get program output
            program_log = os.path.join(os.getcwd(), direct.program_name + '.log')
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.option, direct.program, direct.program_name + '.log')
            exit_code, error_message = direct.execute_command(command)
            if exit_code != 0:
>               raise CritError('* Matlab program executed with errors: *\n%s' % error_message)
E               CritError: * Matlab program executed with errors: *

gslab_make/run_program.py:122: CritError
__________________________ testRunMatlab.test_option ___________________________

self = <gslab_make.tests.test_run_matlab.testRunMatlab testMethod=test_option>

    def test_option(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_matlab(makelog, program = 'gslab_make/tests/input/matlab_test_script.m', option = '-h')

gslab_make/tests/test_run_matlab.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/matlab_test_script.m'
kwargs = {'option': '-h'}, makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f3c8d0>
program_log = '/Users/zong/gslab_make/matlab_test_script.log'
command = 'matlab -h -r "try run(\'/Users/zong/gslab_make/gslab_make/tests/input/matlab_test_script.m\'); catch e, fprintf(getReport(e)), exit(1); end; exit(0)" -logfile "matlab_test_script.log"'
exit_code = 1
error_message = "********************************************************************************
Error with `run_matlab`
************...('* Matlab program executed with errors: *\n%s' % error_message)
CritError: * Matlab program executed with errors: *

"

    def run_matlab(paths, program, **kwargs):
        """ Run Matlab script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'matlab', program = program, makelog = makelog, **kwargs)
    
            # Get program output
            program_log = os.path.join(os.getcwd(), direct.program_name + '.log')
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.option, direct.program, direct.program_name + '.log')
            exit_code, error_message = direct.execute_command(command)
            if exit_code != 0:
>               raise CritError('* Matlab program executed with errors: *\n%s' % error_message)
E               CritError: * Matlab program executed with errors: *

gslab_make/run_program.py:122: CritError
___________________________ testRunMatlab.test_wait ____________________________

self = <gslab_make.tests.test_run_matlab.testRunMatlab testMethod=test_wait>

    def test_wait(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_matlab(makelog, program = 'gslab_make/tests/input/matlab_test_script_wait1.m')

gslab_make/tests/test_run_matlab.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/matlab_test_script_wait1.m', kwargs = {}
makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f44490>
program_log = '/Users/zong/gslab_make/matlab_test_script_wait1.log'
command = 'matlab -nosplash -nodesktop -r "try run(\'/Users/zong/gslab_make/gslab_make/tests/input/matlab_test_script_wait1.m\'); catch e, fprintf(getReport(e)), exit(1); end; exit(0)" -logfile "matlab_test_script_wait1.log"'
exit_code = 1
error_message = "********************************************************************************
Error with `run_matlab`
************...('* Matlab program executed with errors: *\n%s' % error_message)
CritError: * Matlab program executed with errors: *

"

    def run_matlab(paths, program, **kwargs):
        """ Run Matlab script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'matlab', program = program, makelog = makelog, **kwargs)
    
            # Get program output
            program_log = os.path.join(os.getcwd(), direct.program_name + '.log')
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.option, direct.program, direct.program_name + '.log')
            exit_code, error_message = direct.execute_command(command)
            if exit_code != 0:
>               raise CritError('* Matlab program executed with errors: *\n%s' % error_message)
E               CritError: * Matlab program executed with errors: *

gslab_make/run_program.py:122: CritError
________________________ testRunR.test_path_with_space _________________________

self = <gslab_make.tests.test_run_r.testRunR testMethod=test_path_with_space>

    def test_path_with_space(self):
        makelog = {'makelog' : 'log/make.log'}
        with nostderrout():
>           run_r(makelog, program = 'gslab_make/tests/input/R_test_script copy.R', executable = 'R CMD BATCH')

gslab_make/tests/test_run_r.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

paths = {'makelog': 'log/make.log'}
program = 'gslab_make/tests/input/R_test_script copy.R'
kwargs = {'executable': 'R CMD BATCH'}, makelog = 'log/make.log'
direct = <gslab_make.private.programdirective.ProgramDirective object at 0x106f67e50>
command = 'R CMD BATCH --no-save "/Users/zong/gslab_make/gslab_make/tests/input/R_test_script copy.R"'
exit_code = 2
error_message = "********************************************************************************
Error with `run_r`
*****************... CritError('* R program executed with errors: *\n%s' % error_message)
CritError: * R program executed with errors: *

"

    def run_r(paths, program, **kwargs):
        """ Run R script using system command.
    
        Parameters
        ----------
        paths : dict
            Dictionary of paths. Dictionary should contain {
                'makelog' : str
                    Path of makelog.
            }
        program : str
            Path of script to run.
        osname : str, optional
            Name of OS. Defaults to `os.name`.
        shell : bool, optional
            See: https://docs.python.org/2/library/subprocess.html#frequently-used-arguments.
            Defaults to `True`.
        log : str, optional
            Path of program log. Program log is only written if specified.
        executable : str, optional
            Executable to use for system command.
            Defaults to executable specified in metadata.
        option : str, optional
            Options for system command. Defaults to options specified in metadata.
        args : str, optional
            Not applicable.
    
        Returns
        -------
        None
        """
    
        makelog = paths['makelog']
    
        try:
            direct = ProgramDirective(application = 'r', program = program, makelog = makelog, **kwargs)
    
            # Execute
            command = metadata.commands[direct.osname][direct.application] % (direct.executable, direct.option, direct.program)
            exit_code, error_message = direct.execute_command(command)
            direct.write_log()
            if exit_code != 0:
>               raise CritError('* R program executed with errors: *\n%s' % error_message)
E               CritError: * R program executed with errors: *

gslab_make/run_program.py:461: CritError
______________________ testTextfill.test_tags_not_closed _______________________

self = <gslab_make.tests.test_textfill.testTextfill testMethod=test_tags_not_closed>

    def test_tags_not_closed(self):
        with nostderrout():
            error = textfill(input    = 'gslab_make/tests/input/tags_not_closed.log',
                             template = 'gslab_make/tests/input/textfill_template.lyx',
                             output   = './build/textfill_template_filled.lyx')
>       self.assertIn('HTMLParseError', error)
E       AssertionError: 'HTMLParseError' not found in 'Traceback (most recent call last):\n  File "/Users/zong/gslab_make/gslab_make/textfill.py", line 18, in textfill\n    text = parse_text(args)\n  File "/Users/zong/gslab_make/gslab_make/textfill.py", line 60, in parse_text\n    text = read_text(args[\'input\'], args[\'prefix\'])\n  File "/Users/zong/gslab_make/gslab_make/textfill.py", line 74, in read_text\n    text.close()\n  File "/Users/zong/gslab_make/gslab_make/textfill.py", line 110, in close\n    raise CritError(\'Tag %s is not closed\' % tag)\nCritError: Tag tag is not closed\n'

gslab_make/tests/test_textfill.py:78: AssertionError
==================== 15 failed, 57 passed in 81.61 seconds =====================
Name                                       Stmts   Miss Branch BrPart  Cover   Missing
--------------------------------------------------------------------------------------
gslab_make/check_links.py                     37     27      2      0    26%   29-37, 62-84
gslab_make/create_links.py                    30     20      2      0    31%   43-60, 93-95, 128-130
gslab_make/dir_mod.py                         48      4     20      2    88%   25-26, 75, 81, 72->75, 80->81
gslab_make/private/exceptionclasses.py         4      0      0      0   100%
gslab_make/private/linkdirective.py          110     82     30      0    20%   47-53, 63-64, 74-83, 93-101, 111-119, 140-147, 168-172, 182-187, 197-199, 208-215, 250-256, 266-274, 284-285, 295-301, 312-316
gslab_make/private/messages.py                23      0      0      0   100%
gslab_make/private/metadata.py                 7      0      0      0   100%
gslab_make/private/programdirective.py       107     13     32      9    84%   64, 95, 110-113, 126, 218, 264, 295-296, 337-338, 63->64, 94->95, 124->130, 125->126, 217->218, 262->268, 263->264, 269->exit, 336->337
gslab_make/private/utility.py                 46     26     12      1    36%   46-63, 82-94, 16->23
gslab_make/run_program.py                    183     38     34      6    78%   123, 313-328, 384, 386, 503-523, 560-565, 121->123, 272->exit, 383->384, 385->386, 405->410, 559->560
gslab_make/tablefill.py                      143      5     68     10    93%   56, 108, 141, 174, 177, 35->38, 38->40, 55->56, 86->exit, 94->91, 107->108, 125->122, 140->141, 170->174, 176->177
gslab_make/tablefill_info.py                   0      0      0      0   100%
gslab_make/tests/nostderrout.py               12      0      2      0   100%
gslab_make/tests/test_clear_dir.py            41      2      8      1    94%   55-56, 54->55
gslab_make/tests/test_execute_command.py      31      3      8      4    82%   26, 39-40, 23->26, 33->35, 35->exit, 38->39
gslab_make/tests/test_remove_path.py          56      3      6      2    92%   63, 68-69, 62->63, 67->68
gslab_make/tests/test_run_lyx.py             108      2      8      4    95%   125-126, 117->119, 119->121, 121->exit, 124->125
gslab_make/tests/test_run_mathematica.py      68     15     10      5    74%   25-26, 33-36, 42-43, 49-50, 68, 76, 78, 81-82, 71->73, 73->75, 75->76, 77->78, 80->81
gslab_make/tests/test_run_matlab.py           72     23      8      3    65%   24-25, 32-35, 41-42, 47-48, 60-64, 70-73, 76-78, 87-88, 81->83, 83->exit, 86->87
gslab_make/tests/test_run_perl.py             65      2      8      3    93%   77-78, 69->71, 71->73, 76->77
gslab_make/tests/test_run_python.py           64      2      8      3    93%   76-77, 68->70, 70->72, 75->76
gslab_make/tests/test_run_r.py                79      6     12      5    88%   50-51, 88, 90, 93-94, 81->83, 83->85, 87->88, 89->90, 92->93
gslab_make/tests/test_run_stata.py            62      3      8      4    90%   71, 74-75, 66->68, 68->70, 70->71, 73->74
gslab_make/tests/test_tablefill.py            96      2     42      6    94%   143-144, 20->exit, 37->34, 57->43, 74->exit, 138->exit, 142->143
gslab_make/tests/test_textfill.py             83      2     12      3    95%   138-139, 17->exit, 133->exit, 137->138
gslab_make/tests/test_zip.py                  35      2      4      2    90%   45-46, 41->exit, 44->45
gslab_make/textfill.py                       138      2     60      5    96%   48, 174, 36->39, 39->41, 47->48, 104->exit, 173->174
gslab_make/textfill_info.py                    0      0      0      0   100%
gslab_make/write_link_logs.py                 31     23      2      0    24%   52-71, 88-95
gslab_make/write_logs.py                      88     55     22      3    33%   69-84, 111, 152-172, 197-207, 227-246, 40->exit, 107->exit, 110->111
--------------------------------------------------------------------------------------
TOTAL                                       1867    362    428     81    78%
